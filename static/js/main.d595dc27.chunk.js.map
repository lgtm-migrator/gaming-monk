{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["SimpleDialog","handleClose","_this","setState","open","_this$props","this","props","onClose","classes","selectedValueAvatar","selectedValueEmail","selectedValueUserName","other","Object","objectWithoutProperties","react_default","a","createElement","Dialog","assign","aria-labelledby","DialogTitle","id","IconButton","aria-label","style","position","right","top","onClick","Close_default","List","ListItem","justifyContent","ListItemAvatar","Avatar","height","width","src","alt","React","Component","modalStyles","avatar","backgroundColor","blue","color","SimpleDialogWrapped","withStyles","TablePaginationActions","handleFirstPageButtonClick","event","_this2","onChangePage","handleBackButtonClick","page","handleNextButtonClick","handleLastPageButtonClick","Math","max","ceil","count","rowsPerPage","_this$props2","theme","className","root","disabled","direction","LastPage_default","FirstPage_default","KeyboardArrowRight_default","KeyboardArrowLeft_default","TablePaginationActionsWrapped","flexShrink","palette","text","secondary","withTheme","CustomPaginationActionsTable","state","users","filteredUsers","filterList","result","value","target","toConsumableArray","_this3","filter","user","email","toLowerCase","search","first_name","handleChangePage","handleChangeRowsPerPage","handleClickOpen","row","last_name","_this4","axios","get","then","data","d","map","concat","_this5","_this$state","emptyRows","min","length","Paper","tableWrapper","margin","padding","borderRadius","border","float","marginRight","bottom","type","placeholder","onChange","Table","table","TableHead","TableRow","TableCell","align","TableBody","slice","cursor","key","component","scope","colSpan","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","native","onChangeRowsPerPage","ActionsComponent","minWidth","overflowX","App","src_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d595dc27.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport axios from \"axios\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport blue from \"@material-ui/core/colors/blue\";\n\nconst actionsStyles = theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary\n    // marginLeft: theme.spacing.unit * 2.5\n  }\n});\n\nclass SimpleDialog extends React.Component {\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const {\n      classes,\n      onClose,\n      selectedValueAvatar,\n      selectedValueEmail,\n      selectedValueUserName,\n      ...other\n    } = this.props;\n\n    return (\n      <Dialog\n        onClose={this.handleClose}\n        aria-labelledby=\"simple-dialog-title\"\n        {...other}>\n        <DialogTitle id=\"simple-dialog-title\">User Details</DialogTitle>\n        <IconButton\n          aria-label=\"Close\"\n          style={{ position: \"absolute\", right: 20, top: 7 }}\n          onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n        <div>\n          <List>\n            <ListItem style={{ justifyContent: \"center\" }}>\n              <ListItemAvatar>\n                <Avatar style={{ height: 150, width: 150 }}>\n                  <img\n                    src={selectedValueAvatar}\n                    alt=\"\"\n                    style={{ height: 150, width: 150 }}\n                  />\n                </Avatar>\n              </ListItemAvatar>\n            </ListItem>\n            <ListItem style={{ justifyContent: \"center\" }}>\n              Username: {selectedValueUserName}\n            </ListItem>\n            <ListItem style={{ justifyContent: \"center\" }}>\n              Email: {selectedValueEmail}\n            </ListItem>\n          </List>\n        </div>\n      </Dialog>\n    );\n  }\n}\n\nconst modalStyles = {\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600]\n  }\n};\nconst SimpleDialogWrapped = withStyles(modalStyles)(SimpleDialog);\n\nclass TablePaginationActions extends React.Component {\n  handleFirstPageButtonClick = event => {\n    this.props.onChangePage(event, 0);\n  };\n\n  handleBackButtonClick = event => {\n    this.props.onChangePage(event, this.props.page - 1);\n  };\n\n  handleNextButtonClick = event => {\n    this.props.onChangePage(event, this.props.page + 1);\n  };\n\n  handleLastPageButtonClick = event => {\n    this.props.onChangePage(\n      event,\n      Math.max(0, Math.ceil(this.props.count / this.props.rowsPerPage) - 1)\n    );\n  };\n\n  render() {\n    const { classes, count, page, rowsPerPage, theme } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <IconButton\n          onClick={this.handleFirstPageButtonClick}\n          disabled={page === 0}\n          aria-label=\"First Page\">\n          {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n        </IconButton>\n        <IconButton\n          onClick={this.handleBackButtonClick}\n          disabled={page === 0}\n          aria-label=\"Previous Page\">\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={this.handleNextButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"Next Page\">\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={this.handleLastPageButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"Last Page\">\n          {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n        </IconButton>\n      </div>\n    );\n  }\n}\n\nconst TablePaginationActionsWrapped = withStyles(actionsStyles, {\n  withTheme: true\n})(TablePaginationActions);\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\"\n    // marginTop: theme.spacing.unit * 3\n  },\n  table: {\n    minWidth: 500\n  },\n  tableWrapper: {\n    overflowX: \"auto\"\n  }\n});\n\nclass CustomPaginationActionsTable extends React.Component {\n  state = {\n    users: [],\n    page: 0,\n    rowsPerPage: 3,\n    open: false,\n    selectedValueAvatar: null,\n    selectedValueUserName: null,\n    selectedValueEmail: null,\n    filteredUsers: []\n  };\n\n  componentDidMount() {\n    axios.get(`https://reqres.in/api/users?per_page=20`).then(data => {\n      const d = data.data.data.map(user => ({\n        first_name: `${user.first_name}`,\n        last_name: `${user.last_name}`,\n        email: `${user.email}`,\n        id: `${user.id}`,\n        avatar: `${user.avatar}`\n      }));\n      this.setState({ users: d, filteredUsers: d });\n    });\n  }\n\n  filterList = event => {\n    let value = event.target.value;\n    let users = [...this.state.users];\n    let result = [];\n    result = users.filter(user => {\n      return (\n        user.email.toLowerCase().search(value) !== -1 ||\n        user.first_name.toLowerCase().search(value) !== -1\n      );\n    });\n    this.setState({ filteredUsers: result });\n  };\n  handleChangePage = (event, page) => {\n    this.setState({ page });\n  };\n\n  handleChangeRowsPerPage = event => {\n    this.setState({ page: 0, rowsPerPage: event.target.value });\n  };\n  handleClickOpen = row => {\n    this.setState({\n      open: true,\n      selectedValueAvatar: row.avatar,\n      selectedValueEmail: row.email,\n      selectedValueUserName: row.first_name + row.last_name\n    });\n  };\n\n  handleClose = value => {\n    this.setState({ open: false });\n  };\n  render() {\n    const { classes } = this.props;\n    const { users, rowsPerPage, page, filteredUsers } = this.state;\n    const emptyRows =\n      rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage);\n\n    return (\n      <Paper className={classes.root}>\n        <div className={classes.tableWrapper}>\n          <div>\n            <h1 style={{ margin: 0 }}>Users</h1>\n            <input\n              style={{\n                padding: 5,\n                borderRadius: 2,\n                border: \"1px solid darkgrey\",\n                width: 200,\n                float: \"right\",\n                marginRight: 10,\n                position: \"relative\",\n                bottom: 30\n              }}\n              type=\"text\"\n              placeholder=\"Search\"\n              onChange={this.filterList}\n            />\n          </div>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>S.No.</TableCell>\n                <TableCell align=\"right\">First Name</TableCell>\n                <TableCell align=\"right\">Last Name</TableCell>\n                <TableCell align=\"right\">Email</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredUsers\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map(row => (\n                  <TableRow\n                    style={{ cursor: \"pointer\" }}\n                    key={row.id}\n                    onClick={() => this.handleClickOpen(row)}>\n                    <TableCell>{row.id}</TableCell>\n                    <TableCell component=\"th\" scope=\"row\" align=\"right\">\n                      {row.first_name}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.last_name}</TableCell>\n                    <TableCell align=\"right\">{row.email}</TableCell>\n                  </TableRow>\n                ))}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 48 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={[3, 6, 9, 12]}\n                  colSpan={3}\n                  count={users.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  SelectProps={{\n                    native: true\n                  }}\n                  onChangePage={this.handleChangePage}\n                  onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                  ActionsComponent={TablePaginationActionsWrapped}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n\n          <SimpleDialogWrapped\n            selectedValueAvatar={this.state.selectedValueAvatar}\n            selectedValueEmail={this.state.selectedValueEmail}\n            selectedValueUserName={this.state.selectedValueUserName}\n            open={this.state.open}\n            onClose={this.handleClose}\n          />\n        </div>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(CustomPaginationActionsTable);\n","import React from \"react\";\nimport \"./App.css\";\nimport CustomPaginationActionsTable from \"./Table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CustomPaginationActionsTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}